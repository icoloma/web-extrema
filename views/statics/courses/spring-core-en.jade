extends ../../layouts/layout
append content
  a(class="btn btn-warning pull-right", href="/courses#spring-training") Back to courses
  h1 Core Spring
  hr
  p Core Spring is the four-day flagship Spring Framework training. In this training, students build a Spring-powered Java application that demonstrates the <b>Spring Framework</b> and other Spring technologies like <b>Spring AOP</b> and <b>Spring Security</b> in an intensely productive, hands-on setting.
  p Completion of this training entitles each student to receive a free voucher to schedule an exam at a Pearson VUE Center to become a <b>Spring Certified Professional</b>.
  p Core Spring is the perfect training if:
  ul.bullets
    li You are interested in learning all about <b>developing Java applications with Spring</b>
    li You have an upcoming project and <b>need to learn Spring quickly</b>
    li You like to become <b>Spring Certified</b> to improve your career opportunities
  p To further improve your Spring developer skills we recommend to take <a href="/courses/spring-rich-web">Rich Web Applications with Spring</a> or <a href="/courses/spring-enterprise">Enterprise Integration with Spring</a> after completing Core Spring.

  hr

  .row-fluid
    section#goals.span6
      dl.dl-horizontal
        dt Duration:
        dd 32 hours
        dt Language: 
        dd This course is available in English, Spanish and Italian. 
        dt Audience:
        dd This training is designed for Java developers and architects.
        dt Requirements:
        dd Each student is required to carry his/her own laptop, and should have enough permissions to install applications on it.
      h2 Overview
      p At the end of the training, you should have an understanding of Spring and associated technologies and be able to do the following:
      ul.bullets
        li Use the <b>Spring Framework</b> to develop Java applications
        li Use <b>dependency injection</b> to set up and configure applications
        li <b>Test Spring-based applications</b>
        li Set up Spring configuration using <b>XML, annotations, and Java configuration</b>
        li Use <b>Hibernate and JDBC with Spring</b> to access relational databases
        li Use <b>Spring support for transactions</b>
        li Use <b>aspect-oriented programming (AOP)</b> to add behavior to objects
        li Develop a basic Web application with <b>Spring MVC</b>
        li Use <b>Spring Security</b> to secure Web applications
        li Use Spring with <b>RMI, HttpInvoker, and JMS</b> for remote communication
        li Add management with the <b>JMX API</b>

    section.span6
      
      h2 Syllabus
      ol
        li Introduction to Spring
          ul.bullets
            li The Spring application context
            li XML configuration
            li Working with existing singletons and factories
            li Working with multiple configuration files
        li Understanding the Bean Life Cycle
          ul.bullets
            li XML namespaces
            li Initialization, use, and destruction phases
            li Working with Spring interceptors
            li Externalizing constant values into properties files
            li Bean scopes"
            li "Simplifying Application Configuration
            li Bean definition inheritance
            li Inner beans
            li p and util namespaces
            li Dependency injection of collections
            li Spring Expression Language (SpEL)
        li Annotation-Based Dependency Injection
          ul.bullets
            li Autowiring and component scanning
            li Stereotype annotations
            li Java-based configuration
            li Mixing configuration styles
            li When to use XML, annotations, and Java configuration
        li Testing a Spring-Based Application
          ul.bullets
            li Annotations for integration testing with Spring (using JUnit)
            li Advanced concepts: application context caching and the @DirtiesContext annotation
        li Aspect-Oriented Programming
          ul.bullets
            li What problems does AOP solve?
            li Differences between Spring AOP and AspectJ
            li Defining pointcut expressions
            li How to use the types of advice: around, before, after
        li Data Access and JDBC with Spring
          ul.bullets
            li How Spring integrates with existing data access technologies
            li DataAccessException hierarchy
            li jdbc namespace
            li Simplifying jdbc access using the Spring JdbcTemplate
        li Integrating Spring with Hibernate
          ul.bullets
            li Quick introduction to ORM with Hibernate
            li Benefits of using Spring with Hibernate
            li Hibernate configuration in Spring
            li Exception handling
        li Database Transactions with Spring
          ul.bullets
            li Declaring a Spring Transaction Manager
            li @Transactional annotation
            li Configuring isolation levels
            li Configuring transaction propagation
            li Transactions and integration testing
        li Spring in a Web Application
          ul.bullets
            li Configuring Spring in a Web application (using Spring MVC, Struts, JSF)
            li Introduction to Spring MVC
            li Defining Spring MVC controllers using annotations
            li Spring MVC in the view layer
            li MVC namespace (new in Spring 3.0)
        li Spring Security
          ul.bullets
            li What problems does Spring Security solve?
            li Configuring authentication
            li Intercepting URLs
            li The Spring Security tag library for JSPs
            li Security at the method level
            li Customizing the Spring Security filter chain
        li Remoting
          ul.bullets
            li Problems with traditional RMI
            li Using Spring remoting over RMI
            li Using the Spring HttpInvoker for remote access over HTTP
        li JMS
          ul.bullets
            li Introduction to JMS
            li Configuring JMS resources with Spring
            li Sending and receiving messages using the Spring JmsTemplate and message listener containers
        li JMX
          ul.bullets
            li Introduction to JMX
            li Configuring Spring to export MBeans automatically
            li Exporting a Spring bean as an MBean
   


