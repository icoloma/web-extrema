extends ../../layouts/layout

append content
  a(class="btn btn-warning pull-right", href="/courses#javaspecialists-training") !{__('back-courses')}
  h1 Javaspecialists Master Course
  hr
  .row-fluid
    section.span6
      dl.dl-horizontal
        dt Duration
        dd Four days of eight hours each
        dt Language
        dd This course can be delivered in Spanish, English or Italian. 
        dt Aimed at
        dd Java professionals with at least 2 years of experience, who would like to learn how to truly master the Java Programming Language.
        dt Requirements
        dd Each student is required to carry his/her own laptop, and should have an administrator account. Prior to attending the course it is recommended that each student first confirms that they pass the <a href="/pdf/javaspecialistmastercourseprep.pdf">Javaspecialist Master Course Prep</a> test successfully.
      hr
      h2 Syllabus
      ol
        li Introduction
          ul.bullets
            li Welcome!
            li Course organization
            li Course contents
            li Course overview
        li Multi-Threading
          ul.bullets
            li Basics of Threads
              ul.bullets
                li Threading Background: Threading Models, Process vs thread, Parallel vs concurrent
                li Creating New: Thread Groups, States
                li Synchronized
                li Locks
                li Priorities
                li Timers
                li Daemon Threads
            li The Secrets of Concurrency
              ul.bullets
                li Interrupted Status
                li What threads are doing
                li Limiting # of Threads
                li Visibility Problems
                li Early Writes
                li Corrupt Data
                li Contention
                li Java Memory Model
                li Hardware impact
                li Deadlocks
            li Applied Threading Techniques
              ul.bullets
                li Executors
                li Count-down latch
                li Semaphore
                li Blocking queues
                li Atomic Variables
                li Volatile
                li Exceptions
                li Thread local variables
                li Stopping Threads
                li Shutdown hooks
            li Threading Problems
              ul.bullets
                li Race Conditions
                li Starvation
                li Fairness
                li Deadlock
                li Livelock
        li Java IO
          ul.bullets
            li Object Streams and Serialization
              ul.bullets
                li Object Serialization
                li Simple Object Serialization
                li Serializable Fields
                li readObject() / writeObject()
                li Controlling Serialization
                li Externalizable
                li Serial Object Versioning
                li Compatible Class Changes
                li Incompatible Class Changes
                li Overriding Versioning
                li Circular References
                li Serialization Performance
                li Serialization Pitfalls
                li Resetting Streams
            li Java New IO Package
              ul.bullets
                li Motivation for Using
                li Working with Buffers
                li Allocating Buffers
                li Buffers Advantages
                li Channels
                li Memory Mapped Files
                li Non-Blocking Operations
                li Selectors
                li NIO Uses and Event Driven Architecture
            li Character Streams Encoding
              ul.bullets
                li The Unicode Standard
                li Forms of Unicode
                li 32-bit Characters
                li Big / Little Endian
                li Other Encodings
                li Other Charsets - ISO 8859
                li Charset Class
                li Encoders and Decoders
                li Code Points
        li Java Memory
          ul.bullets
            li Garbage Collection
              ul.bullets
                li Overview
                li Generational Spaces
                li GC Tasks
                li Heap Fragmentation
                li GC Pros and Cons
                li Algorithms: Reachability, History, JVM 1.4-6, Young/Old Space
                li Measuring GC Activity
                li Performance and Object Size
                li Using jConsole
                li Managing OutOfMemoryError
            li Tuning JVM
              ul.bullets
                li JVM Switches
                li Non-Standard Switches
                li Sizing Generational Spaces
            li References
              ul.bullets
                li Reference Objects
                li Object Reachability
                li Using References: SoftReference, WeakReference, PhantomReference
                li ReferenceQueue
                li WeakHashMap
                li SoftHashMap
                li Performance Implications
            li Object Pooling
              ul.bullets
                li Introduction
                li Reasons for not Using
                li Thread Pooling
                li Database Connection Pooling
        li Reflection API
          ul.bullets
            li Overview
              ul.bullets
                li Introduction
                li Usefulness of Reflection
                li Dangers of Reflection
                li Examining Classes
                li Reflection Package
                li Retrieving Class Objects
                li Working with Class Objects
                li Accessing fields
                li Accessing methods
                li Generics
            li Manipulating Objects
              ul.bullets
                li Working with objects
                li Creating new objects
                li Getting and Setting Fields
                li Invoking Methods
                li Casting through Reflection
                li Final fields
            li Arrays
              ul.bullets
                li Working with Arrays
                li Elements' Type
                li Creating new Arrays
                li Getting and Setting Elements
            li Dynamic Proxy Classes
              ul.bullets
                li Proxy Definition
                li Creating new Proxy
                li InvocationHandler
                li Proxy Class
            li Classes
              ul.bullets
                li When are Classes Loaded?
                li How loadClass() works
                li Implementing own ClassLoader
                li The defineClass Method
        li Data Structures
          ul.bullets
            li Basics
              ul.bullets
                li Introduction
                li Abstract Classes
                li Algorithm Complexity
                li Data Structures & GC
                li Primitive Data Structures
                li Null Elements
                li Type Safety
            li Iteration
              ul.bullets
                li Iterators
                li Efficiency
                li RandomAccess
                li Multithreading
                li ConcurrentModification
                li CopyOnWrite Collections
                li New "for-each" iteration
                li Iterable interface
            li Sorting
              ul.bullets
                li Collections & Arrays
                li Sorting Performance
                li Comparisons
                li Maps
                li Trees
                li Hashing with JDK 1.4+
                li Compound Keys
                li Map of Maps
                li ConcurrentHashMap
                li Linked Maps
                li Searching
            li Generics
            li Other Structures
              ul.bullets
                li Multimap
                li Queues
                li Deques
                li Heaps
                li LRU Cache
        li Exceptions
          ul.bullets
            li Error Handling
              ul.bullets
                li Class Hierarchy
                li Throwable Class
                li Exception Class
                li Error Class
                li StackTraceElement
                li Abuse of Exceptions
                li Uncaught Exceptions
                li Asynchronous Exceptions
            li Critical Errors Inside the JVM
            li Best Practices
              ul.bullets
                li Checked vs. Unchecked
                li Avoid Custom Exceptions
                li Writing Good Exceptions
                li Wrap Low Level Exceptions
                li Avoid Catching "Programmer Bug" Exceptions
                li Chain Exceptions
                li Avoid Swallowing Exceptions
                li Cleanup After An Exception
                li Never Abuse Exceptions for Flow Control
                li Throw Exceptions Early
                li Catch Exceptions Late
                li Good Throws Clauses
                li Document Exceptions
                li Unit Test Exceptions
            li Assertions
              ul.bullets
                li Mechanism
                li "assert" Statement
                li Detecting if enabled
                li When to Use
                li When Not to Use
                li JVM switches
                li Why disable?
            li Performance Issues
        li Java Optimizations
          ul.bullets
            li Low Level
              ul.bullets
                li Overview
                li High Level
                li Low Level
                li When Not to Use
                li Microbenchmarking
                li Finding bottlenecks
                li Optimization Techniques
            li Other Optimizations
              ul.bullets
                li Compiler
                li Runtime
                li Just-in-Time
                li HotSpot
            li Problem Areas
              ul.bullets
                li Typical Problem Areas
                li Methods Declarations
                li Object Creation
                li Strings and constants
                li Loops
                li Benchmarking
                li Class Casting with Generics
                li Other Areas
            li Tools
              ul.bullets
                li Profiling Tools
                li HPROF
                li How to tune
        li Dates and Time Zones
          ul.bullets
            li Computer Time
              ul.bullets
                li Time Synchronization
                li Human Time Interpretation
                li Computer Setting
            li Time in Java: Date, TimeZone, Calendar, GregorianCalendar, DateFormat, Date, Timestamp
            li Best practices
        li Logging
          ul.bullets
            li Overview
              ul.bullets
                li Why log?
                li Principal Requirements
                li Main Logging APIs
                li Jakarta Commons Logging
            li Log4j API
              ul.bullets
                li Building Blocks: Logger, Appender, Layout
                li Principles: Logger Hierarchy, Level Inheritance, Appenders Additivity
                li Configuration: From Application, From XML File
            li Best Practices
              ul.bullets
                li Defining Logging Scheme
                li Logging Levels
                li Log Messages Format
                li Centralized Logging
                li Code Guards
                li Exceptions
                li Reviewing Logging
            li Impact on Performance
              ul.bullets
                li Unecessary Strings
                li Writing to Disk
                li Asynchronous Logging




    section#goals.span6
      h2 Distribution
      p We spend approximately 43% doing active hands-on labs. Each days training starts at 8:30am and ends at 17:00, with about one hour of lunch and 30 minutes of tea / coffee / nicotine breaks.
      p <span class="label">Day 1</span>
      ul.bullets
        li <b>Introduction:</b> 0h
        li <b>Multi-Threading:</b> 4h lectures, 3h labs
      p <span class="label">Day 2</span>
      ul.bullets
        li <b>Java IO:</b> 2h lectures, 1.5h labs
        li <b>Java Memory:</b> 2h lectures, 1.5h labs
      p <span class="label">Day 3</span>
      ul.bullets
        li <b>Reflection:</b> 1h lectures, 45m labs
        li <b>Data Structures:</b> 2h lectures, 1.5h labs
        li <b>Exceptions:</b> 1h lectures, 45m labs
      p <span class="label">Day 4</span>
        li <b>Java Optimizations:</b> 2h lectures, 1.5h labs
        li <b>Dates & Time Zones:</b> 1h lectures, 45m labs
        li <b>Logging:</b> 1h lectures, 45m labs
        li <b>Conclusion:</b> 0h
      hr
      dl.dl-horizontal
        dt Total lecturing
        dd 16 hours
        dt Total labs
        dd 12 hours

