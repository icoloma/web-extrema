extends ../../layouts/layout
append content
  h1 Enterprise Integration with Spring
  hr

  p Enterprise Integration with Spring is a four-day training course that is led by SpringSource experts who will discuss the most important topics and technologies related to enterprise application integration. This hands-on training teaches you how to apply Spring technologies to solve integration problems that face server-side developers.

  p Completion of this training entitles each student to receive a free voucher to schedule an exam at a Pearson VUE Center to become a <b>SpringSource Certified Spring Enterprise Integration Specialist</b>.

  p Enterprise Integration with Spring is the perfect training if:
  ul.bullets
    li You like to become an expert at using the <b>Spring Framework</b>
    li <b>You took Core Spring</b> and want to further improve your developer skills
    li You like to be able to solve even the <b>most complex problems with Spring</b>
    li You are working on/have planned a <b>large Spring project</b>
    li You are interested in being granted the <b>expert Spring certification</b>

  p To further improve your Spring developer skills we recommend to take <a href="/courses/spring-rich-web">Rich Web Applications with Spring</a> after completing Enterprise Integration with Spring.

  hr

  .row-fluid
    section.span6
      dl.dl-horizontal
        dt Duration:
        dd 32 hours
        dt Language: 
        dd This course is available in English, Spanish and Italian. 
        dt Audience:
        dd This training is designed for Java developers and architects.
        dt Requirements:
        dd Each student is required to carry his/her own laptop, and should have enough permissions to install applications on it.
      h2 Overview
      p At the end of the training, you should have an understanding of Spring and associated technologies for enterprise integration and be able to do the following:
      ul.bullets
        li Use Spring to <b>create concurrent applications</b> and <b>schedule tasks</b>
        li Use remoting to implement <b>client-server applications</b>
        li Use <b>Spring Web services</b> to create loosely coupled SOAP-based Web services and clients
        li Use <b>Spring-MVC</b> to create RESTful Web services and clients
        li Use <b>JMS</b> for asynchronous messaging-based communication
        li Understand and use <b>local and distributed transactions</b>
        li Use <b>Spring Integration</b> to create event-driven pipes-and-filters architectures and integrate with external applications
        li Use <b>Spring Batch</b> for managed, scalable batch processing that is based on both custom and built-in processing components

    section.span6
      
      h2 Syllabus
      ol
        li Introduction
          ul.bullets
            li Styles of enterprise integration
            li File transfer, remoting, and Web services
        li Tasks and Scheduling
          ul.bullets
            li Introduction to concurrency
            li Java Concurrency APIs
            li Spring task scheduling support
            li namespace
            li @Scheduled and @Async annotations
        li Remoting
          ul.bullets
            li Limitations of “plain” RMI
            li Benefits of using Spring remoting
            li Spring remoting over RMI
            li Spring HttpInvoker
            li Hessian and Burlap support
        li SOAP Web Services with Spring WS
          ul.bullets
            li Web services best practices
            li Introduction to Spring Web services
            li Object-XML mapping with the Spring OXM abstraction layer
            li Client access with WebServiceTemplate
            li Error handling
            li Out-of-container testing
        li RESTful Web Services
          ul.bullets
            li Core REST concepts
            li REST support in Spring 3.x
            li REST specific annotations in Spring
            li Client access with RestTemplate
        li Working with JMS
          ul.bullets
            li Introduction to JMS
            li Configuring JMS resources with Spring
            li Sending and receiving messages using Spring JmsTemplate and message listener containers
        li Transactional JMS
          ul.bullets
            li Why use JMS transactions
            li Transactional JMS resources with Spring
            li Duplicate message handling
        li Global Transaction Management (XA and JTA)
          ul.bullets
            li Two-phase commit and XA
            li JTA and Spring
            li Configuring JtaTransactionManager
            li Transaction demarcation
        li Introduction to Spring Integration
          ul.bullets
            li Goals of Spring Integration
            li Core components of Spring Integration
            li Defining channels, message endpoints, and gateways
            li Spring Integration namespaces
            li Eclipse-based Visual Editor for Spring Integration
        li Configuring Spring Integration
          ul.bullets
            li Channel types and polling
            li Synchronous and asynchronous handoff
            li Synchronous and asynchronous error handling
            li Advanced endpoint types: bridge and router
            li Working with MessagingTemplate
        li Spring Integration Advanced Features
          ul.bullets
            li Splitting and aggregating messages
            li Dispatcher configuration
            li XML support: XPath, XSLT, Object-XML mapping
        li Introduction to Spring Batch
          ul.bullets
            li Spring Batch high-level overview
            li Working with jobs, steps, readers, and writers
            li Job parameters and job identity
            li Batch state persistence in the database
            li Spring Batch quick-start example
        li Restart and Recovery with Spring Batch
          ul.bullets
            li Reading flat files
            li Introduction to skip, retry, repeat, and restart
            li Spring Batch listeners
        li Spring Batch Admin and Scaling Batch Jobs
          ul.bullets
            li The Spring Batch Admin Web console
            li Scaling and parallel processing
            li Multithreaded and parallel steps
            li Partitioning

   


